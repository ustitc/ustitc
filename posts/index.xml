<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on DevБлог Устица</title><link>/posts/</link><description>DevБлог Устица (Posts)</description><generator>Hugo -- gohugo.io</generator><language>ru</language><lastBuildDate>Thu, 21 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Еженедельный обзор № 6</title><link>/posts/weekly-6/</link><pubDate>Thu, 21 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/weekly-6/</guid><description>&lt;p>&lt;strong>&lt;a href="https://www.fredrikholmqvist.com/pages/why-i-hate-frameworks.html">[Статья] Why I Hate Frameworks&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Проблема фреймворков расказанная в виде истории о молотке. К чему может привести погоня за унификацией и обобщением&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://scribe.rip/p/what-every-software-engineer-should-know-about-search-27d1df99f80d">[Статья] What every software engineer should know about search&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Инструкция по тому как собрать свою поисковую систему&lt;/p></description></item><item><title>Еженедельный обзор № 5</title><link>/posts/weekly-5/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/weekly-5/</guid><description>&lt;p>&lt;strong>&lt;a href="https://blog.scottlogic.com/2021/09/30/Collective-Code-Ownership.html">[Статья] Capitalism, Socialism, and Code Ownership&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Взгляд на проекты с точки зрения экономической теории. Почему в классическом open source лучше работает капитализм, а в коммерческой разработке социализм?&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://github.com/koka-lang/koka">[Инструмент] Koka lang&lt;/a> и &lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/algeff-tr-2016-v2.pdf">[Статья] Algebraic Effects for Functional Programming&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Концепция алгебраических эффектов реализованная на уровне языка программирования.&lt;/p>
&lt;p>Эффект - нечто, что может случится в вызываемой функции и изменить её ход исполнения. Задача пользователя функции определить, что делать, если эффект случится. Похоже на try/catch конструкцию, но&lt;/p>
&lt;ul>
&lt;li>С возможностью вернуться в место возникновения ошибки&lt;/li>
&lt;li>Можно описывать не только ошибки, но и &lt;a href="https://koka-lang.github.io/koka/doc/book.html#sec-effect-types">другие side-эффекты&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Еженедельный обзор № 4</title><link>/posts/weekly-4/</link><pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate><guid>/posts/weekly-4/</guid><description>&lt;p>&lt;strong>&lt;a href="https://scattered-thoughts.net/writing/things-unlearned/">[Статья] Things unlearned&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Разбор мифов разработки. Почему советы бывалых разработчиков надо принимать с долей скептицизма и идти своим путём в формировании опыта. К примеру, рассуждения о ФП перекликаются с мыслями из &lt;a href="https://blog.ustits.dev/posts/weekly-1/">обзора № 1&lt;/a>. Хочешь быть лучше - не слушай, а практикуй. Много&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://www.yegor256.com/2016/09/20/oop-without-classes.html">[Статья] OOP Without Classes?&lt;/a> и &lt;a href="https://www.yegor256.com/2020/12/01/abstract-objects.html">[Статья] Abstract Objects&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Возможно ООП без классов и если да, то как это может выглядеть?&lt;/p></description></item><item><title>Еженедельный обзор № 3</title><link>/posts/weekly-3/</link><pubDate>Thu, 23 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/weekly-3/</guid><description>&lt;p>&lt;strong>&lt;a href="https://www.cbui.dev/how-to-rapidly-improve-at-any-programming-language/">[Статья] How To Rapidly Improve At Any Programming Language&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Pull request - медиум для передачи опыта между разработчиками. Как получить этот опыт, если ты их не делаешь? Читать чужие.&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://github.com/crev-dev/cargo-crev">[Проект] Crev&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Crev - язык и подход для оценки кода. Code review, которые хранятся в git репозитории. Можно оставить оценку коду, либо почитать, что пишут остальные про библиотеку, которую хочешь затянуть в проект. Должно быть полезно в экосистемах в которых разработчик полагается на маленькие библиотеки (clojure, haskell).&lt;/p></description></item><item><title>Еженедельный обзор № 2</title><link>/posts/weekly-2/</link><pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/weekly-2/</guid><description>&lt;p>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=SisRFSKI4iI">[Видео] SSD 1/16: README vs. IEEE | Егор Бугаенко&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Первая лекция из серии про разработку ПО. Про важность документирования архитектуры.&lt;/p>
&lt;blockquote>
&lt;p>Если я тебя не понимаю, то это твоя вина.&lt;/p>
&lt;/blockquote>
&lt;p>Наши документы должны содержать достаточный контекст, чтобы его мог понять любой специалист.&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://blog.frankel.ch/metrics/">[Статья] On metrics | Nicolas Fränkel&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Предупреждение для разработчиков, чтобы они были аккуратны в выборе метрик. Плохие - не принесут пользы, хорошие - станут самоцелью.&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://habr.com/ru/post/577440/">[Статья] Коммерческая разработка&lt;/a>&lt;/strong>&lt;/p>
&lt;p>То что мы кодим для себя дома не равно тому, что мы делаем на работе. В первом случае нас двигает любопытство, во втором нас толкают деньги.&lt;/p></description></item><item><title>Еженедельный обзор № 1</title><link>/posts/weekly-1/</link><pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate><guid>/posts/weekly-1/</guid><description>&lt;p>&lt;strong>&lt;a href="https://www.youtube.com/watch?v=-VADIcicpcg">[Видео] Object Oriented Programming vs Functional Programming | Dave Farley&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Парадигма разработки - это правила, которые защищают нас от ошибок, но не защищают от плохого кода.&lt;/p>
&lt;blockquote>
&lt;p>Плохой код можно писать в любой парадигме&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Функциональный программисты рассматривают программирование как математику. ОО программисты рассматривают программирование как моделирование&lt;/p>
&lt;/blockquote>
&lt;p>Автор показывает какие плюсы есть у ООП и в рамках обсуждения конкурентности затрагивает пункты из &lt;a href="https://www.reactivemanifesto.org">реактивного манифеста&lt;/a> автором которого является.&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://fredrikholmqvist.com/posts/brooks-wirth-go/">[Статья] Brooks, Wirth and Go&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Автор рассуждает о современной разработке, которая полна магии, т.е. сложными инструментами, которые скрывают за собой сложные проблемы. Почему при наличии более совершенного инструментария мы разучились писать &lt;a href="https://www.youtube.com/watch?v=EY6q5dv_B-o&amp;amp;t=1360s">ОС за 3 недели&lt;/a>?&lt;/p>
&lt;p>В пример приводит Go и как с помощью него снизить количество “магии” вокруг себя.&lt;/p>
&lt;p>&lt;strong>&lt;a href="https://bonsaibrowser.com/">[ПО] Bonsai browser&lt;/a>&lt;/strong>&lt;/p>
&lt;p>Альтернативное видение браузера. Вместо вкладок - группировка по сайтам, вместо &lt;a href="https://help.vivaldi.com/desktop/tabs/tab-stacks/">стека вкладок, как в vivaldi&lt;/a> - workspace-ы и папки внутри них. Такой подход должен быть удобен для исследовательской деятельности, когда требуется группировать и активно пользоваться большим количеством ресурсов.&lt;/p>
&lt;p>&lt;strong>Группирока страниц по сайтам&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/img/bonsaibrowser1.png" alt="Группирока страниц по сайтам">&lt;/p>
&lt;p>&lt;strong>Workspace-ы&lt;/strong>&lt;/p>
&lt;p>&lt;img src="/img/bonsaibrowser2.png" alt="Workspace-ы">&lt;/p></description></item></channel></rss>